#!/bin/bash

# Couleurs pour l'affichage
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}====================================================="
echo -e "üöÄ Initialisation du Projet RabbitMQ - Calcul Distribu√© üöÄ"
echo -e "=====================================================${NC}"
echo ""

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}[INFO] $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

log_error() {
    echo -e "${RED}[ERREUR] $1${NC}"
}

log_step() {
    echo -e "\n${BLUE}--- √âTAPE : $1 ---${NC}"
}

# 1. V√©rifier Python et Pip
log_step "V√©rification de Python et Pip"
if ! command -v python3 &> /dev/null
then
    log_error "Python 3 n'est pas install√©. Veuillez l'installer pour continuer."
    exit 1
fi
log_info "Python 3 trouv√© : $(python3 --version)"

if ! command -v pip3 &> /dev/null
then
    if ! python3 -m pip --version &> /dev/null
    then
        log_error "Pip3 n'est pas install√©. Veuillez l'installer pour continuer."
        log_info "Essayez : sudo apt install python3-pip (Debian/Ubuntu) ou brew install python3 (macOS)"
        exit 1
    else
      PIP_CMD="python3 -m pip"
    fi
else
    PIP_CMD="pip3"
fi
log_info "Pip trouv√© : $($PIP_CMD --version)"
echo ""

# 2. Installer les d√©pendances Python
log_step "Installation des d√©pendances Python (requirements.txt)"
if [ -f "requirements.txt" ]; then
    if $PIP_CMD install -r requirements.txt; then
        log_info "D√©pendances Python install√©es avec succ√®s."
    else
        log_error "L'installation des d√©pendances Python a √©chou√©."
        exit 1
    fi
else
    log_error "Le fichier requirements.txt est introuvable. Assurez-vous d'√™tre dans le bon r√©pertoire."
    exit 1
fi
echo ""

# 3. V√©rifier Docker
log_step "V√©rification de Docker"
if ! command -v docker &> /dev/null
then
    log_error "Docker n'est pas install√©. Veuillez l'installer pour continuer."
    log_info "Instructions : https://docs.docker.com/get-docker/"
    exit 1
fi
log_info "Docker trouv√© : $(docker --version)"

# V√©rifier si Docker daemon est en cours d'ex√©cution
if ! docker info &> /dev/null; then
    log_error "Le d√©mon Docker ne semble pas √™tre en cours d'ex√©cution."
    log_warn "Veuillez d√©marrer Docker Desktop ou le service Docker et relancer le script."
    exit 1
fi
log_info "Le d√©mon Docker est actif."
echo ""

# 4. V√©rifier Docker Compose
log_step "V√©rification de Docker Compose"
DOCKER_COMPOSE_CMD=""
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
    log_info "Docker Compose (v1) trouv√© : $(docker-compose --version)"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker compose"
    log_info "Docker Compose (v2 plugin) trouv√© : $(docker compose version)"
else
    log_error "Docker Compose n'est pas install√© (ni v1, ni v2)."
    log_info "Instructions : https://docs.docker.com/compose/install/"
    exit 1
fi
echo ""

# 5. V√©rifier l'existence du fichier docker-compose.yml
log_step "V√©rification du fichier docker-compose.yml"
if [ ! -f "docker-compose.yml" ]; then
    log_error "Le fichier docker-compose.yml est introuvable."
    log_warn "Assurez-vous que le fichier est pr√©sent √† la racine du projet."
    exit 1
fi
log_info "Fichier docker-compose.yml trouv√©."
echo ""

# 6. Lancer le projet avec Docker Compose
log_step "Lancement du projet avec Docker Compose"
log_info "Construction des images et d√©marrage des conteneurs..."
log_info "Cela peut prendre quelques minutes lors du premier lancement."

if $DOCKER_COMPOSE_CMD up --build -d; then
    log_info "Le syst√®me a √©t√© d√©marr√© avec succ√®s via Docker Compose."
else
    log_error "Le d√©marrage avec Docker Compose a √©chou√©."
    log_warn "V√©rifiez les messages d'erreur ci-dessus."
    log_warn "Vous pouvez essayer de nettoyer les anciens conteneurs/volumes et r√©essayer :"
    log_warn "  $DOCKER_COMPOSE_CMD down -v"
    exit 1
fi
echo ""

# 7. Afficher les instructions finales
log_step "Instructions finales"
echo -e "${GREEN}üéâ Le projet RabbitMQ - Calcul Distribu√© est maintenant lanc√© ! üéâ${NC}"
echo ""
echo -e "   üåê ${YELLOW}Interface Web :${NC}            http://localhost:5001"
echo -e "   üê∞ ${YELLOW}RabbitMQ Management :${NC}   http://localhost:15672"
echo -e "      (Identifiants par d√©faut pour RabbitMQ via Docker Compose : ${BLUE}admin / admin123${NC})"
echo ""
echo -e "   ${YELLOW}Pour voir les logs des conteneurs :${NC}"
echo -e "      ${BLUE}$DOCKER_COMPOSE_CMD logs -f${NC}"
echo ""
echo -e "   ${YELLOW}Pour arr√™ter le syst√®me :${NC}"
echo -e "      ${BLUE}$DOCKER_COMPOSE_CMD down${NC}"
echo ""
echo -e "   ${YELLOW}Pour arr√™ter et supprimer les volumes (donn√©es RabbitMQ) :${NC}"
echo -e "      ${BLUE}$DOCKER_COMPOSE_CMD down -v${NC}"
echo ""
echo -e "${BLUE}====================================================="
echo -e "‚ú® Profitez bien du syst√®me de calcul distribu√© ! ‚ú®"
echo -e "=====================================================${NC}"

exit 0 